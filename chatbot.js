// CHATBOT CON TENSORFLOW.JS + COMENTARIOS PROFESIONALES
// Datos de entrenamiento iniciales (simulaci√≥n de ratings de usuarios a productos)
const userData = [
    { userId: 1, productId: 101, rating: 5 },
    { userId: 1, productId: 102, rating: 3 },
    { userId: 2, productId: 101, rating: 4 },
    { userId: 2, productId: 103, rating: 2 },
    { userId: 3, productId: 104, rating: 3 },
  ];
  
  // Convertimos los datos a tensores (estructura de datos de IA)
  // Cada fila representa: [userId, productId]
  const userTensor = tf.tensor2d(
    userData.map(item => [item.userId, item.productId]),
    [userData.length, 2]
  );
  
  // Tensor de ratings (lo que queremos que el modelo aprenda a predecir)
  const ratingTensor = tf.tensor2d(
    userData.map(item => [item.rating]),
    [userData.length, 1]
  );
  
  // Variable global para el modelo de IA
  let model;
  

  // FUNCIONES PARA MANEJAR EL MODELO
  // Carga un modelo desde LocalStorage si existe, o entrena uno nuevo
  async function loadOrCreateModel() {
    try {
      model = await tf.loadLayersModel('localstorage://chatbot-model');
      console.log('‚úÖ Modelo cargado exitosamente de LocalStorage.');
    } catch (error) {
      console.log('‚ö†Ô∏è No se encontr√≥ un modelo guardado. Creando y entrenando uno nuevo...');
  
      // Crear modelo secuencial (capa densa -> capa de salida)
      model = tf.sequential(); //Se crea un modelo secuencial en TensorFlow.js.  se agregan una tras otra, de forma lineal.
      model.add(tf.layers.dense({ units: 50, activation: 'relu', inputShape: [2] })); //dense: agrega una capa densa (fully connected, todos los nodos se conectan a todos). units: 50: esta capa tiene 50 neuronas. activation: 'relu': cada neurona usa la funci√≥n de activaci√≥n ReLU (Rectified Linear Unit), que transforma las salidas como max(0, x). inputShape: [2]: espera 2 valores como entrada por cada dato (en tu caso, usuario y producto).
      model.add(tf.layers.dense({ units: 1 })); //Agrega otra capa densa. units: 1: solo una neurona de salida, se quiere predecir un solo valor (el rating). No especifica activaci√≥n, entonces es lineal por defecto.
  
      model.compile({ optimizer: 'adam', loss: 'meanSquaredError' }); //Prepara el modelo para entrenarlo. optimizer: 'adam': usa el optimizador Adam, que ajusta los pesos eficientemente. loss: 'meanSquaredError': la funci√≥n de p√©rdida ser√° el error cuadr√°tico medio (MSE)
  
      // Entrenar modelo con los tensores
      await model.fit(userTensor, ratingTensor, { //entrena el modelo usando los datos de entrada (userTensor) y las etiquetas reales (ratingTensor).
        epochs: 10, //har√° 10 pasadas completas por todos los datos de entrenamiento.
        callbacks: { // despu√©s de cada √©poca, ejecutar√° una funci√≥n que imprime el n√∫mero de √©poca (epoch) y la p√©rdida (logs.loss) en la consola. Esto te permite ver si el modelo est√° mejorando.
          onEpochEnd: (epoch, logs) => {
            console.log(`Epoch ${epoch}: loss = ${logs.loss}`);
          }
        }
      });
  
      // Guardar el modelo entrenado en LocalStorage
      await model.save('localstorage://chatbot-model');
      console.log('‚úÖ Modelo nuevo entrenado y guardado en LocalStorage.');
    }
  }
  
  // Iniciar cargando o creando el modelo
  loadOrCreateModel();
  
  // --------------------------------------------------------
  // RESPUESTAS DEL CHATBOT
  // --------------------------------------------------------
  
  // Diccionario de respuestas predefinidas para las conversaciones
  const responses = {
    'hola': '¬°Hola! ¬øC√≥mo est√°s hoy?',
    'bien, ¬øy t√∫?': 'Estoy muy bien, gracias por preguntar. üòä ¬øEn qu√© puedo ayudarte?',
    '¬øqu√© puedes hacer?': 'Puedo platicar contigo, responder preguntas b√°sicas y recomendarte productos.',
    '¬øqu√© productos recomiendas?': '¬°Puedo hacerte una recomendaci√≥n personalizada si quieres! Solo dime "recomi√©ndame".',
    'recomi√©ndame algo': 'Bas√°ndome en tus gustos, tengo una recomendaci√≥n especial para ti. üòâ',
    '¬øc√≥mo sabes mis gustos?': 'Uso un peque√±o modelo de inteligencia artificial que aprende de tus preferencias.',
    '¬øqu√© es inteligencia artificial?': 'Es la habilidad de una m√°quina para realizar tareas que normalmente requieren inteligencia humana. ü§ñ',
    '¬øusas inteligencia artificial?': '¬°S√≠! Aprendo de tus mensajes para darte mejores respuestas y sugerencias.',
    '¬øme puedes ayudar a elegir un regalo?': 'Claro que s√≠, ¬øpara qui√©n es el regalo? üéÅ',
    'es para mi mam√°': '¬°Qu√© bonito detalle! ‚ù§Ô∏è ¬øQu√© tipo de cosas le gustan a tu mam√°? (ejemplo: perfumes, libros, ropa)',
    'le gustan los perfumes': 'Perfecto, te puedo recomendar perfumes florales o frescos que son muy populares.',
    '¬øcu√°l perfume recomiendas?': 'Te recomendar√≠a un aroma floral suave, como un perfume de jazm√≠n o rosas. üå∏',
    'gracias': '¬°De nada! Estoy aqu√≠ para ayudarte. ¬øAlgo m√°s en lo que pueda apoyarte?',
    's√≠, ¬øqu√© m√°s puedes hacer?': 'Adem√°s de recomendar, puedo conversar contigo sobre m√∫sica, pel√≠culas o hobbies. üéµüé¨‚ú®',
    'hablemos de m√∫sica': '¬°Me encanta la m√∫sica! ¬øQu√© g√©nero te gusta m√°s?',
    'pop': 'El pop tiene canciones s√∫per pegajosas. ¬øTe gusta alg√∫n artista en especial? üé§',
    's√≠, taylor swift': '¬°Taylor Swift es incre√≠ble! ü¶ã ¬øTienes alguna canci√≥n favorita de ella?',
    'love story': '¬°"Love Story" es todo un cl√°sico rom√°ntico! üíñ ¬øQuieres que te recomiende m√°s canciones parecidas?',
    's√≠, por favor': 'Claro, te recomiendo escuchar "You Belong With Me" y "Enchanted". Son hermosas. ‚ú®',
    'adi√≥s': '¬°Hasta luego! Que tengas un d√≠a maravilloso. üåü ¬°Espero verte pronto aqu√≠!',
  };
  
  // --------------------------------------------------------
  // MANEJO DEL CHAT EN LA P√ÅGINA
  // --------------------------------------------------------
  
  // Obtener referencias a los elementos HTML
  const chatContainer = document.getElementById('chat-container');
  const userInput = document.getElementById('user-input');
  const sendButton = document.getElementById('send-button');
  const resetButton = document.getElementById('reset-button');
  
  // Escuchar eventos del bot√≥n Enviar y la tecla Enter
  sendButton.addEventListener('click', handleUserMessage);
  userInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
      handleUserMessage();
    }
  });
  
  // Escuchar evento del bot√≥n Resetear modelo
  resetButton.addEventListener('click', resetModel);
  
  // Funci√≥n principal que maneja los mensajes del usuario
  async function handleUserMessage() {
    const message = userInput.value.toLowerCase().trim();
    if (message === '') return;
  
    appendMessage('user', message); // Mostrar mensaje del usuario en el chat
    userInput.value = '';
  
    if (responses[message]) {
      appendMessage('bot', responses[message]); // Si hay respuesta predefinida
    } else if (message.includes('recomi√©ndame')) {
      const recommendation = await generateRecommendation(1, 102); // Predicci√≥n IA
      appendMessage('bot', `Basado en tu historial, te recomiendo un producto con una puntuaci√≥n estimada de ${recommendation.toFixed(2)}.`);
    } else {
      appendMessage('bot', 'No entend√≠ tu mensaje. ¬øPuedes intentar con otra pregunta o pedir una recomendaci√≥n? ü§î');
    }
  }
  
  // Funci√≥n para agregar un mensaje al contenedor de chat
  function appendMessage(sender, text) {
    const messageElem = document.createElement('div');
    messageElem.classList.add('message', sender);
    messageElem.innerText = text;
    chatContainer.appendChild(messageElem);
    chatContainer.scrollTop = chatContainer.scrollHeight; // Hacer scroll autom√°tico
  }
  
  // --------------------------------------------------------
  // FUNCIONES DEL MODELO
  // --------------------------------------------------------
  
  // Generar una predicci√≥n de calificaci√≥n para un usuario y producto
  async function generateRecommendation(userId, productId) {
    if (!model) {
      console.log('El modelo a√∫n no est√° cargado.');
      return 0;
    }
    const newUserInput = tf.tensor2d([[userId, productId]]);
    const prediction = model.predict(newUserInput);
    const predictedValue = (await prediction.array())[0][0];
    return predictedValue;
  }
  
  // Funci√≥n para borrar el modelo guardado en LocalStorage
  async function resetModel() {
    try {
      await tf.io.removeModel('localstorage://chatbot-model');
      console.log('üóëÔ∏è Modelo eliminado exitosamente.');
      alert('Modelo eliminado. Se entrenar√° uno nuevo al recargar la p√°gina.');
    } catch (error) {
      console.error('Error al eliminar el modelo:', error);
      alert('Hubo un problema al eliminar el modelo.');
    }
  }
  